#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX 100  // Define the maximum size of the stack and queue

typedef struct {
    char items[MAX];
    int front, rear;
} Queue;

typedef struct {
    char items[MAX];
    int top;
} Stack;

void initQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}

int isQueueEmpty(Queue* q) {
    return (q->front == -1);
}

int isQueueFull(Queue* q) {
    return (q->rear == MAX - 1);
}

void enqueue(Queue* q, char value) {
    if (isQueueFull(q)) {
        printf("Queue is full\n");
        return;
    }
    if (isQueueEmpty(q)) {
        q->front = 0;
    }
    q->items[++q->rear] = value;
}

char dequeue(Queue* q) {
    if (isQueueEmpty(q)) {
        printf("Queue is empty\n");
        return '\0';
    }
    char value = q->items[q->front];
    if (q->front == q->rear) {
        q->front = -1;
        q->rear = -1;
    } else {
        q->front++;
    }
    return value;
}

void displayQueue(Queue* q) {
    if (isQueueEmpty(q)) {
        printf("Queue is empty\n");
        return;
    }
    for (int i = q->front; i <= q->rear; i++) {
        printf("%c ", q->items[i]);
    }
    printf("\n");
}

void initStack(Stack* s) {
    s->top = -1;
}

int isStackEmpty(Stack* s) {
    return (s->top == -1);
}

int isStackFull(Stack* s) {
    return (s->top == MAX - 1);
}

void push(Stack* s, char value) {
    if (isStackFull(s)) {
        printf("Stack is full\n");
        return;
    }
    s->items[++s->top] = value;
}

char pop(Stack* s) {
    if (isStackEmpty(s)) {
        printf("Stack is empty\n");
        return '\0';
    }
    return s->items[s->top--];
}

char peek(Stack* s) {
    if (isStackEmpty(s)) {
        return '\0';
    }
    return s->items[s->top];
}

int precedence(char op) {
    switch (op) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return 0;
    }
}

int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

void infixToPostfix(char* infix, Queue* output) {
    Stack operators;
    initStack(&operators);

    for (int i = 0; i < strlen(infix); i++) {
        char ch = infix[i];

        if (isalnum(ch)) {
            enqueue(output, ch);
        } else if (ch == '(') {
            push(&operators, ch);
        } else if (ch == ')') {
            while (!isStackEmpty(&operators) && peek(&operators) != '(') {
                enqueue(output, pop(&operators));
            }
            pop(&operators);  // Remove '(' from the stack
        } else if (isOperator(ch)) {
            while (!isStackEmpty(&operators) && precedence(peek(&operators)) >= precedence(ch)) {
                enqueue(output, pop(&operators));
            }
            push(&operators, ch);
        }
    }

    while (!isStackEmpty(&operators)) {
        enqueue(output, pop(&operators));
    }
}

int main() {
    char infix[MAX];
    printf("Enter an infix expression: ");
    scanf("%s", infix);

    Queue output;
    initQueue(&output);

    infixToPostfix(infix, &output);

    printf("Postfix expression: ");
    displayQueue(&output);

    return 0;
}
