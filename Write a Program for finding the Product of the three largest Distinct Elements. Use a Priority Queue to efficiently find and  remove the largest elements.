#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int data;
    int priority;
} Node;

typedef struct {
    Node* array;
    int size;
    int capacity;
} PriorityQueue;

PriorityQueue* createPriorityQueue(int capacity) {
    PriorityQueue* pq = (PriorityQueue*)malloc(sizeof(PriorityQueue));
    pq->array = (Node*)malloc(capacity * sizeof(Node));
    pq->size = 0;
    pq->capacity = capacity;
    return pq;
}

void swap(Node* a, Node* b) {
    Node temp = *a;
    *a = *b;
    *b = temp;
}

void heapify(PriorityQueue* pq, int index) {
    int largest = index;
    int left = 2 * index + 1;
    int right = 2 * index + 2;

    if (left < pq->size && pq->array[left].priority > pq->array[largest].priority)
        largest = left;

    if (right < pq->size && pq->array[right].priority > pq->array[largest].priority)
        largest = right;

    if (largest != index) {
        swap(&pq->array[index], &pq->array[largest]);
        heapify(pq, largest);
    }
}

void insert(PriorityQueue* pq, int data, int priority) {
    if (pq->size == pq->capacity) {
        printf("Priority queue is full\n");
        return;
    }

    int i = pq->size++;
    pq->array[i].data = data;
    pq->array[i].priority = priority;

    while (i != 0 && pq->array[(i - 1) / 2].priority < pq->array[i].priority) {
        swap(&pq->array[i], &pq->array[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
}

int extractMax(PriorityQueue* pq) {
    if (pq->size == 0) {
        printf("Priority queue is empty\n");
        return -1;
    }

    int max = pq->array[0].data;
    pq->array[0] = pq->array[--pq->size];
    heapify(pq, 0);

    return max;
}

int findProductOfThreeLargest(int arr[], int n) {
    PriorityQueue* pq = createPriorityQueue(n);

    for (int i = 0; i < n; i++) {
        insert(pq, arr[i], arr[i]);
    }

    int largest1 = extractMax(pq);
    int largest2 = extractMax(pq);
    int largest3 = extractMax(pq);

    int product = largest1 * largest2 * largest3;
    free(pq->array);
    free(pq);

    return product;
}

int main() {
    int arr[] = {10, 20, 30, 5, 7, 9, 25, 40, 50};
    int n = sizeof(arr) / sizeof(arr[0]);

    int product = findProductOfThreeLargest(arr, n);
    printf("Product of the three largest distinct elements: %d\n", product);

    return 0;
}
